"""
Django settings for bot project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from os import getenv
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
SECRET_KEY = getenv('DJANGO_SECRET_KEY', '')
DEBUG = bool(getenv('DJANGO_DEBUG', ''))
ALLOWED_HOSTS = getenv('DJANGO_ALLOWED_HOSTS', '').split()
CSRF_TRUSTED_ORIGINS = [f'https://{host}' for host in ALLOWED_HOSTS]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'feedback_bot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_asgi_lifespan.middleware.LifespanStateMiddleware',  # for passing ptb application to views
    'feedback_bot.middleware.TelegramSecretTokenMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'config.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
if getenv('DJANGO_USE_SQLITE', '').lower() in ('true', '1', 'yes'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': getenv('POSTGRES_DB', ''),
            'USER': getenv('POSTGRES_USER', ''),
            'PASSWORD': getenv('POSTGRES_PASSWORD', ''),
            'HOST': '127.0.0.1',
            'PORT': int(getenv('POSTGRES_PORT', '5432')),
        },
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
LOCALE_PATHS = [
    BASE_DIR / 'messages',
]
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Telegram Bot Settings
TELEGRAM_BUILDER_BOT_WEBHOOK_URL = getenv(
    'TELEGRAM_BUILDER_BOT_WEBHOOK_URL', 'https://yourdomain.com'
)
TELEGRAM_BUILDER_BOT_WEBHOOK_NAME = getenv('TELEGRAM_BUILDER_BOT_WEBHOOK_NAME', 'telegram')
TELEGRAM_BUILDER_BOT_WEBHOOK_SECRET = getenv('TELEGRAM_BUILDER_BOT_WEBHOOK_SECRET', '')
TELEGRAM_BUILDER_BOT_TOKEN = getenv('TELEGRAM_BUILDER_BOT_TOKEN', '')
TELEGRAM_BUILDER_BOT_ADMINS = getenv('TELEGRAM_BUILDER_BOT_ADMINS', '').split(',')
TELEGRAM_ENCRYPTION_KEY = getenv('TELEGRAM_ENCRYPTION_KEY', '')

if not any(
    (
        TELEGRAM_BUILDER_BOT_WEBHOOK_URL,
        TELEGRAM_ENCRYPTION_KEY,
        TELEGRAM_BUILDER_BOT_TOKEN,
        TELEGRAM_BUILDER_BOT_ADMINS,
    )
):
    raise ValueError('One or more Telegram environment variables are not set!')

TELEGRAM_ADMIN_CHAT_ID = getenv('TELEGRAM_ADMIN_CHAT_ID', '')
TELEGRAM_LOG_TOPIC_ID = getenv('TELEGRAM_LOG_TOPIC_ID', '1')
TELEGRAM_NEW_BOT_ADMIN_APPROVAL = bool(getenv('TELEGRAM_NEW_BOT_ADMIN_APPROVAL', 'true'))
TELEGRAM_LANGUAGES = getenv('TELEGRAM_LANGUAGES', 'en').split(' ')

# Logging
if DEBUG:
    from rich.console import Console

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'rich': {
                'format': '[%(module)s.%(funcName)s:%(lineno)d]: %(message)s',  # rich adds time and level
                'datefmt': '%Y-%m-%d %H:%M:%S',
            },
        },
        'handlers': {
            'console': {
                'class': 'rich.logging.RichHandler',
                'formatter': 'rich',
                'level': 'DEBUG',
                'console': Console(width=175),
                'rich_tracebacks': True,
            }
        },
        'loggers': {
            'root': {'handlers': ['console'], 'level': 'INFO'},
            'django': {'handlers': ['console'], 'level': 'INFO'},
        },
    }
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'default': {
                'format': '[%(asctime)s.%(msecs)03d] [%(levelname)s] [%(module)s.%(funcName)s:%(lineno)d]: %(message)s',
                'datefmt': '%Y-%m-%d %H:%M:%S',
            },
        },
        'handlers': {
            'file': {
                'class': 'logging.handlers.TimedRotatingFileHandler',
                'filename': getenv('LOG_TO', f'./{BASE_DIR.name}.log'),
                'when': 'midnight',
                'interval': 1,
                'backupCount': 7,
                'formatter': 'default',
                'level': 'INFO',
            }
        },
        'loggers': {
            '': {
                'handlers': ['file'],
                'level': 'INFO',
            },
        },
    }
